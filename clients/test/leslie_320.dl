#include "../clientlib/decompiler_imports.dl"
#include "../clientlib/loops_semantics.dl"
#include "../clientlib/guards.dl"
#include "../clientlib/vulnerability_macros.dl"

// basic functionality
// map the statement (included in the callgraph) to a function
.decl FLA_Statement_Function(stmt:Statement, func:Function)
FLA_Statement_Function(stmt, func) :-
  Statement_Function(stmt, func).

FLA_Statement_Function(stmt, caller) :-
  InFunction(block, caller),
  CallGraphEdge(block, callee),
  FLA_Statement_Function(stmt, callee).

// tainted vars initialed by attacker
// random number calculation using env opcode, related to random number attack
.decl EnvOp(stmt:Statement, to:Variable)
EnvOp(stmt, to) :-
   TIMESTAMP(stmt, to);NUMBER(stmt, to);DIFFICULTY(stmt, to);COINBASE(stmt, to).

// 1. tainted by envs
.decl Leslie_TaintedVar(funcSign:symbol, var:Variable)
.output Leslie_TaintedVar
Leslie_TaintedVar(funcSign, var) :-
  EnvOp(stmt, to),
  DataFlows(to, var),
  FLA_Statement_Function(stmt, func),
  PublicFunctionSelector(func, funcSign).

// sensitive vars
// vars related to calling outside or critical semantic features
.decl Leslie_SensitiveVar(funcSign:symbol, var:Variable)
.output Leslie_SensitiveVar

// type1: call outside address manipulated by func arg; caller; or tx.orign
Leslie_SensitiveVar(funcSign,var) :-
  // can add sensitive call to hook function signature
  StatementUsesMemory_ActualMemoryArg(callStmt, _, _, source),
  (PublicFunctionArg(_, var, _);CALLER(_, var);ORIGIN(_, var)),
  DataFlows(var, source),
  FLA_Statement_Function(callStmt, func),
  PublicFunctionSelector(func, funcSign).

// type2: call outside address with tainted params
Leslie_SensitiveVar(funcSign,var) :-
  StatementUsesMemory_ActualMemoryArg(callStmt, _, _, params),
  DataFlows(var, params),
  Leslie_TaintedVar(funcSign, var),
  FLA_Statement_Function(callStmt, func),
  
  PublicFunctionSelector(func, funcSign).

// type3: judge the revert condition
// related to DoS attack
Leslie_SensitiveVar(funcSign,condVar) :-
  // throw/revert
  ThrowBlock(block),
  // throw block depends on sensitive var (strict check)
  ControlsWith(_, block, condVar),
  InFunction(block, func),
  PublicFunctionSelector(func, funcSign).

Leslie_SensitiveVar(funcSign,target) :-
  (CALLER(_, caller); ORIGIN(_, caller)),
  DataFlows(caller, target),
  SELFDESTRUCT(sdStmt, target),
  Statement_Function(sdStmt, func),
  funcSign = "__function_selector__",
  HighLevelFunctionName(func, funcSign).

// tainted data flow into taint sink
.decl Leslie_TaintedVarToSensitiveVar(funcSign:symbol, taintedVar:Variable, sensitiveVar:Variable)
.output Leslie_TaintedVarToSensitiveVar
Leslie_TaintedVarToSensitiveVar(funcSign, var1, var2) :-
  Leslie_TaintedVar(funcSign, var1),
  !SLOAD(_, _, var1),
  Leslie_SensitiveVar(funcSign, var2),
  DataFlows(var1, var2),
  var1 != var2.

// slots of profitable state vars related to receiver address or transfer amount
.decl Leslie_ProfitableVar(func:Function, callStmt:Statement, funcSign:symbol, slotNum:Value)
.output Leslie_ProfitableVar
Leslie_ProfitableVar(func,callStmt,funcSign,slotNum) :-
  CALL(callStmt, _, _, amount, _, _, _, _, _),
  SLOAD(stmt, slotNumVar, var),
  DataFlows(var, amount),
  Variable_Value(slotNumVar, slotNum),
  FLA_Statement_Function(stmt, func),
  PublicFunctionSelector(func, funcSign).

Leslie_ProfitableVar(func,callStmt,funcSign,slotNum) :-
  CALL(callStmt, _, calleeVar, _, _, _, _, _, _),
  SLOAD(stmt, slotNumVar, var),
  Variable_Value(slotNumVar, slotNum),
  DataFlows(var, calleeVar),
  FLA_Statement_Function(stmt, func),
  PublicFunctionSelector(func, funcSign).

// tainted: load slots of profitable state vars
Leslie_TaintedVar(funcSign, var) :-
  Leslie_ProfitableVar(_,_,_,slotNum),
  SLOAD(stmt, slotNumVar, var),
  Variable_Value(slotNumVar, slotNum),
  FLA_Statement_Function(stmt, func),
  
  PublicFunctionSelector(func, funcSign).

// tainted data flow into storage
.decl Leslie_TaintedSlot(slotNum:Value)
Leslie_TaintedSlot(slotNum) :-
  Leslie_TaintedVar(_, var1),
  SSTORE(_, slotNumVar, var2),
  Variable_Value(slotNumVar, slotNum),
  DataFlows(var1, var2).

Leslie_TaintedVar(funcSign, var) :-
  Leslie_TaintedSlot(slotNum),
  SLOAD(stmt, slotNumVar, var),
  Variable_Value(slotNumVar, slotNum),
  FLA_Statement_Function(stmt, func),
  PublicFunctionSelector(func, funcSign).

// !--------------------------

// related to call
// callArgIndex = 1 means the 2nd parameter
// 0,1....
.decl Leslie_TaintedCallArg(funcSign:symbol, callStmt:Statement, callArgIndex:number)
.output Leslie_TaintedCallArg
Leslie_TaintedCallArg(funcSign, callStmt, callArgIndex-1) :-
  (CALL(callStmt, _, _, _, _, _, _, _, _);STATICCALL(callStmt, _, _, _, _, _, _, _);DELEGATECALL(callStmt, _, _, _, _, _, _, _)),
  StatementUsesMemory_ActualMemoryArg(callStmt, _, callArgIndex, callArg),
  callArgIndex != 0,
  Leslie_TaintedVar(_, var),
  DataFlows(var, callArg),
  Statement_Function(callStmt, func),
  PublicFunctionSelector(func, funcSign).

// tainted data flow into the func return value
.decl Leslie_TaintedFuncRet(funcSign:symbol, retIndex:number, ret:Variable)
.output Leslie_TaintedFuncRet
Leslie_TaintedFuncRet(funcSign, retIndex, ret) :-
  RETURN(retStmt, _, _),
  FLA_Statement_Function(retStmt, func),
  StatementUsesMemory_ActualMemoryArg(retStmt, _, retIndex, ret),
  Leslie_TaintedVar(_, var),
  DataFlows(var, ret),
  PublicFunctionSelector(func, funcSign).

// data from external call return value directly flow into taint sink
// for Bad Randomness attack detection
.decl Leslie_CallRetToSensitiveVar(funcSign:symbol, callStmt:Statement, callRetVar:Variable, callRetIndex:number, sensitiveVar:Variable)
.output Leslie_CallRetToSensitiveVar
Leslie_CallRetToSensitiveVar(funcSign, callStmt, callRetVar, callRetIndex, sensitiveVar) :-
  ExternalCall_ActualReturn(callStmt, callRetVar, callRetIndex),
  Leslie_SensitiveVar(_, sensitiveVar),
  DataFlows(callRetVar, sensitiveVar),
  FLA_Statement_Function(callStmt, func),
  PublicFunctionSelector(func, funcSign).

Leslie_CallRetToSensitiveVar(funcSign, callStmt, callRetVar, callRetIndex, sensitiveVar) :-
  ExternalCall_ActualReturn(callStmt, callRetVar, callRetIndex),
  JUMPI(_, _, sensitiveVar),
  DataFlows(callRetVar, sensitiveVar),
  FLA_Statement_Function(callStmt, func),
  PublicFunctionSelector(func, funcSign).

//!--------------------------

// explicit spread from external call return value to func return 
.decl Leslie_Spread_CallRetToFuncRet(callStmt:Statement, callRet:Variable, callRetIndex:number, funcSign:symbol, funcRetIndex:number, funcRet:Variable)
.output Leslie_Spread_CallRetToFuncRet
Leslie_Spread_CallRetToFuncRet(callStmt, callRet, callRetIndex, funcSign, funcRetIndex, funcRet) :-
  ExternalCall_ActualReturn(callStmt, callRet, callRetIndex),
  RETURN(returnStmt, _, _),
  Statement_Function(returnStmt, func),
  StatementUsesMemory_ActualMemoryArg(returnStmt, _, funcRetIndex, funcRet),
  DataFlows(callRet, funcRet),
  PublicFunctionSelector(func, funcSign).

// explicit spread from external call return value to external call arg
.decl Leslie_Spread_CallRetToCallArg(callStmt1:Statement, callRet:Variable, callRetIndex:number, callStmt2:Statement, callArgIndex:number, callArg:Variable)
.output Leslie_Spread_CallRetToCallArg
Leslie_Spread_CallRetToCallArg(callStmt1, callRet, callRetIndex, callStmt2, callArgIndex-1, callArg) :-
  ExternalCall_ActualReturn(callStmt1, callRet, callRetIndex),
  (CALL(callStmt2, _, _, _, _, _, _, _, _);STATICCALL(callStmt2, _, _, _, _, _, _, _);DELEGATECALL(callStmt2, _, _, _, _, _, _, _)),
  StatementUsesMemory_ActualMemoryArg(callStmt2, _, callArgIndex, callArg),
  callArgIndex != 0,
  DataFlows(callRet, callArg).

// explicit spread from pub func arg to external call arg
.decl Leslie_Spread_FuncArgToCallArg(funcSign:symbol, funcArgIndex:number, funcArg:Variable, callStmt:Statement, callArgIndex:number, callArg:Variable)
.output Leslie_Spread_FuncArgToCallArg
Leslie_Spread_FuncArgToCallArg(funcSign, funcArgIndex, funcArg, callStmt, callArgIndex-1, callArg) :-
  PublicFunctionSelector(func, funcSign),
  PublicFunctionArg(func, funcArg, funcArgIndex),
  (CALL(callStmt, _, _, _, _, _, _, _, _);STATICCALL(callStmt, _, calleeVar, _, _, _, _, _);DELEGATECALL(callStmt, _, _, _, _, _, _, _)),
  StatementUsesMemory_ActualMemoryArg(callStmt, _, callArgIndex, callArg),
  callArgIndex != 0,
  DataFlows(funcArg, callArg).

// explicit spread from func arg to func ret
.decl Leslie_Spread_FuncArgToFuncRet(funcSign:symbol, funcArgIndex:number, funcArg:Variable, funcRetIndex:number, funcRet:Variable)
.output Leslie_Spread_FuncArgToFuncRet
Leslie_Spread_FuncArgToFuncRet(funcSign, funcArgIndex, funcArg, funcRetIndex, funcRet) :-
  PublicFunctionSelector(func, funcSign),
  PublicFunctionArg(func, funcArg, funcArgIndex),
  RETURN(returnStmt, _, _),
  Statement_Function(returnStmt, func),
  StatementUsesMemory_ActualMemoryArg(returnStmt, _, funcRetIndex, funcRet),
  DataFlows(funcArg, funcRet).


//!--------------------------

// restore external call info
.decl Leslie_ExternalCallInfo(func:Function, callStmt:Statement, callOp:Opcode, calleeVar:Variable, numArg:number, numRet:number)
.output Leslie_ExternalCallInfo
Leslie_ExternalCallInfo(func, callStmt, callOp, calleeVar, numArg, numRet) :-
  PublicFunctionSelector(func, _),
  FLA_Statement_Function(callStmt, func),
  (CALL(callStmt, _, calleeVar, _, _, _, _, _, _);STATICCALL(callStmt, _, calleeVar, _, _, _, _, _);DELEGATECALL(callStmt, _, calleeVar, _, _, _, _, _)),
  Statement_Opcode(callStmt, callOp),
  ExternalCall_NumOfArgs(callStmt, numArg),
  numRet = count: ExternalCall_ActualReturn(callStmt, _, _).

// restore funcSign
// call to const function 
.decl Leslie_ExternalCall_FuncSign_ConstType(func:Function, callStmt:Statement, funcSign:Value)
.output Leslie_ExternalCall_FuncSign_ConstType
Leslie_ExternalCall_FuncSign_ConstType(func, callStmt, funcSign) :-
  Leslie_ExternalCallInfo(func, callStmt, _, _, _, _),
  Variable_Value(actual, funcSign),
  StatementUsesMemory_ActualMemoryArg(callStmt, _, 0, actual).

// restore callee
// 3 types of callee
.decl Leslie_ExternalCall_Callee_ConstType(func:Function, callStmt:Statement, callee:Value)
.output Leslie_ExternalCall_Callee_ConstType
Leslie_ExternalCall_Callee_ConstType(func, callStmt, callee) :-
  Leslie_ExternalCallInfo(func, callStmt, _, calleeVar, _, _),
  Variable_Value(calleeVar, callee).

.decl Leslie_ExternalCall_Callee_StorageType(func:Function, callStmt:Statement, storageSlot:symbol, byteLow:number, byteHigh:number)
.output Leslie_ExternalCall_Callee_StorageType
Leslie_ExternalCall_Callee_StorageType(func, callStmt, storageSlot, byteLow, byteHigh) :-
  Leslie_ExternalCallInfo(func, callStmt, _, calleeVar, _, _),
  !Variable_Value(calleeVar, _),
  Leslie_StorageVariableAddrType(storVar, calleeVar),
  StorageVariableInfo(storVar, storageSlot, byteLow, byteHigh).

.decl Leslie_ExternalCall_Callee_FuncArgType(func:Function, callStmt:Statement, pubFun:Function, argIndex:number)
.output Leslie_ExternalCall_Callee_FuncArgType
Leslie_ExternalCall_Callee_FuncArgType(func, callStmt, pubFun, argIndex) :-
  Leslie_ExternalCallInfo(func, callStmt, _, calleeVar, _, _),
  !Variable_Value(calleeVar, _),
  PublicFunctionArg(pubFun, funcArg, argIndex),
  DataFlows(funcArg, calleeVar).

.decl Leslie_ExternalCall_Known_Arg(func:Function, callStmt:Statement, argIndex:number, argVal:Value)
.output Leslie_ExternalCall_Known_Arg
Leslie_ExternalCall_Known_Arg(func, callStmt, argIndex-1, argVal) :-
  Leslie_ExternalCallInfo(func, callStmt, _, _, _, _),
  Variable_Value(arg, argVal),
  StatementUsesMemory_ActualMemoryArg(callStmt, _, argIndex, arg),
  argIndex != 0. 

// !------Helper

.decl Leslie_FunctionInfo(func:Function, funcSign:symbol, funcHighLevelName:symbol)
.output Leslie_FunctionInfo
Leslie_FunctionInfo(func, funcSign, funcHighLevelName) :-
  PublicFunctionSelector(func, funcSign),
  HighLevelFunctionName(func, funcHighLevelName).

.decl Leslie_StorageVariableAddrType(storVar:symbol, calleeVar:Variable)
Leslie_StorageVariableAddrType(storVar, addr):-
  StorageVariableInfo(storVar, originStorVar, byteLow, byteHigh),
  VarHoldsBytesOfStorVarFinal(var, _, originStorVar, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  widthBytes = 20,
  DataFlows(var, addr),
  AddressTypedVar(addr).

Leslie_StorageVariableAddrType(storVar, addr):-
  StorageVariableInfo(storVar, originStorVar, byteLow, byteHigh),
  VarWrittenToBytesOfStorVarFinal(var, _, _, originStorVar, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  widthBytes = 20,
  DataFlows(addr, var),
  AddressTypedVar(addr).

Leslie_StorageVariableAddrType(storVar, addrFrom):-
  AddressTypedVar(addrFrom),
  DataFlows(addrFrom, addr),
  (EQ(_, otherAddr, addr, _) ; EQ(_, addr, otherAddr, _)),
  DataFlows(var, otherAddr),
  VarHoldsBytesOfStorVarFinal(var, _, originStorVar, byteLow, byteHigh),
  StorageVariableInfo(storVar, originStorVar, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  widthBytes = 20.