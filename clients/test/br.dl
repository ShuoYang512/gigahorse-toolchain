#include "../clientlib/decompiler_imports.dl"
#include "../clientlib/loops_semantics.dl"
#include "../clientlib/guards.dl"
#include "../clientlib/vulnerability_macros.dl"

.decl StatementInAccessibleFunction(s: Statement, f: Function)

StatementInAccessibleFunction(s, f) :-
   Statement_Block(s, b),
   !StaticallyGuardedBlock(b, _),
   InFunction(b, f).

.decl InPublicFunction(stmt:Statement, funSign:symbol)
.output InPublicFunction
InPublicFunction(stmt, funSign) :-
    PublicFunctionSelector(fun, funSign),
    Statement_Block(stmt, block),
    InFunction(block, fun).

.decl PubFunArg(pubFunSign:symbol, argIndex:number, arg: Variable)
.output PubFunArg
PubFunArg(pubFunSign, argIndex, arg) :-
    PublicFunctionSelector(pubFun, pubFunSign),
    PublicFunctionArg(pubFun, arg, argIndex).

// increasing storage index and value while creating contract
.decl IncreasedStorageOn(sstoreStmt: Statement, arrayId: Value)
// When this public function is called, some array symbolized by arrayId is increased in size
        
IncreasedStorageOn(sstoreStmt, arrayId) :-
   PossibleArraySizeVariable(sizeVar, arrayId),
   AddResult(sizeVar, newSizeVar),
   ADD(addStmt, _, _, newSizeVar),
   StatementInAccessibleFunction(addStmt, f),
   SSTORE(sstoreStmt, index, newSizeVar),
   // not sure about the following, what if function calls private function?
   StatementInAccessibleFunction(sstoreStmt, f), 
   Variable_Value(index, arrayId).

.decl ExternalControlledLoop(pubFunSign:symbol, argIndex:number, loop: Block)
.output ExternalControlledLoop
ExternalControlledLoop(pubFunSign, argIndex, loop) :-
    // extract function stmts and arg index and arg
    PubFunArg(pubFunSign, argIndex, arg),

    // the exit condition of the loop (e.g., a < 1)
    DataFlows(arg, condVar),
    
    LoopExitCond(condVar, loop).

.decl MultiCreate(pubFunSign:symbol, argIndex:number, stmt: Statement, condVar:Variable)
.output MultiCreate
MultiCreate(pubFunSign, argIndex, stmt, condVar) :-
    // extract function stmts and arg index and arg
    InPublicFunction(stmt, pubFunSign),
    PubFunArg(pubFunSign, argIndex, arg),

    // stmt is in the loop (while, for loop)
    StatementInStructuredLoop(stmt, loop),
    
    // create stmt and the defined var: addr
    Statement_Opcode(stmt, "CREATE"),
    // Statement_Defines(stmt, addr, _),
    
    // store created contract address to the storage
    // DataFlows(addr, key),
    // MapKeyToStorageIndex(key, _),
    // the exit condition of the loop (e.g., a < 1)
    (DataFlows(arg, condVar);Variable_Value(condVar,_)),
    
    LoopExitCond(condVar, loop).

.decl SoleCreate(pubFunSign:symbol, stmt: Statement)
.output SoleCreate
SoleCreate(pubFunSign, stmt) :-
    // extract function stmts and arg index and arg
    InPublicFunction(stmt, pubFunSign),

    // stmt is in the loop (while, for loop)
    !StatementInStructuredLoop(stmt, _),
    
    // create stmt and the defined var: addr
    Statement_Opcode(stmt, "CREATE").

// the entrance of the detection is either public function or the constructor (for createbin)
.decl FLA_FunctionSelector(func: Function, funcSign: symbol)
.output FLA_FunctionSelector
FLA_FunctionSelector(func, funcSign) :-
  PublicFunctionSelector(func, funcSign).

FLA_FunctionSelector(func, funcSign) :-
  HighLevelFunctionName(func, funcSign),
  funcSign = "__function_selector__".

.decl FLA_Statement_Function(stmt:Statement, func:Function)
FLA_Statement_Function(stmt, func) :-
  Statement_Function(stmt, func).

FLA_Statement_Function(stmt, caller) :-
  InFunction(block, caller),
  CallGraphEdge(block, callee),
  FLA_Statement_Function(stmt, callee).

.decl Leslie_SelfdestructOp(funcSign: symbol, target:Variable)
.output Leslie_SelfdestructOp
Leslie_SelfdestructOp(funcSign, target) :-
  SELFDESTRUCT(stmt, target),
  FLA_Statement_Function(stmt, func),
  FLA_FunctionSelector(func, funcSign).

.decl ExternalControlledCreation(addr: Variable, storeKeyVar: Variable, index: Variable, loop: Block, argIndex:number)
.output ExternalControlledCreation
ExternalControlledCreation(addr, storeKeyVar, index, loop, argIndex) :-
    // stmt is in the loop (while, for loop)
    StatementInStructuredLoop(stmt, loop),
    // create stmt and the defined the return var: addr
    Statement_Opcode(stmt, "CREATE"),
    Statement_Defines(stmt, addr, _),
    // addr flows to other vars related to storage operation
    DataFlows(addr, storeKeyVar),
    MapKeyToStorageIndex(storeKeyVar, index),
    
    
    // get loop var 
    // InductionVariable(v, loop),
    // DataFlows(v, condVar),
    ExternalControlledLoop(_, argIndex, loop).
    // SSTORE(storeStmt, _, storeVar),
    // IncreasedStorageOn(storeStmtOrig, arrayId),
    // ArrayIdToStorageIndex(arrayId, storeOffsetVar),

    
.decl ExternalControlledCreation1(addr: Variable, storeKeyVar: Variable, loop: Block, argIndex:number)
.output ExternalControlledCreation1
ExternalControlledCreation1(addr, storeKeyVar, loop, argIndex) :-
    // stmt is in the loop (while, for loop)
    StatementInStructuredLoop(stmt, loop),
    
    // create stmt and the defined the return var: addr
    Statement_Opcode(stmt, "CREATE"),
    Statement_Defines(stmt, addr, _),

    // addr flows to other vars related to storage operation
    DataFlows(addr, storeKeyVar),
    
    SSTORE(_, _, storeKeyVar),
    
    
    // get loop var 
    // InductionVariable(v, loop),
    // DataFlows(v, condVar),
    ExternalControlledLoop(_, argIndex, loop).

.decl CallAddressFromStorage(loadStmt:Statement, index:Variable, callStmt:Statement)
// Call an address at callStmt that is loaded at loadStmt from storage      
CallAddressFromStorage(loadStmt, index, callStmt) :-
  SLOAD(loadStmt, index, resVar),
  DataFlows(resVar, target),
  CALL(callStmt, _, target, _, _, _, _, _, _).

.decl ExternalCallInControlledLoop(loop: Block, index:Variable)
.output ExternalCallInControlledLoop
ExternalCallInControlledLoop(loop,index) :-
    InductionVariable(i, loop),
    DataFlows(i, index),

    CallAddressFromStorage(_, index, callStmt).

.decl BadRandomness(funSign:symbol, loop:Block)
.output BadRandomness
BadRandomness(funSign, loop) :-
    InFunction(loop, fun),
    PublicFunctionSelector(fun, funSign),
    ExternalCallInControlledLoop(loop,_),
    ExternalControlledCreation1(_,_,_,_).

.decl Check(loop: Block, index:Variable)
.output Check
Check(loop,index) :-
    InductionVariable(i, loop),
    DataFlows(i, index),

    // ExternalControlledCreation2(_,_,_,_,storageIndex),

    CallAddressFromStorage(_, index, callStmt).


.decl ExternalControlledCreation2(addr: Variable, storeKeyVar: Variable, loop: Block, argIndex:number,index:Variable)
.output ExternalControlledCreation2
ExternalControlledCreation2(addr, storeKeyVar, loop, argIndex,index) :-
    // stmt is in the loop (while, for loop)
    StatementInStructuredLoop(stmt, loop),
    // create stmt and the defined the return var: addr
    Statement_Opcode(stmt, "CREATE"),
    Statement_Defines(stmt, addr, _),
    // addr flows to other vars related to storage operation
    DataFlows(addr, storeKeyVar),
    SSTORE(_, index, storeKeyVar),
    // get loop var 
    // InductionVariable(v, loop),
    // DataFlows(v, condVar),
    ExternalControlledLoop(_, argIndex, loop).


.decl BadRandomness1(funSign:symbol, loop:Block)
.output BadRandomness1
BadRandomness1(funSign, loop) :-
    InFunction(loop, fun),
    PublicFunctionSelector(fun, funSign),
    Check(loop,_),
    ExternalControlledCreation2(_,_,_,_,_).